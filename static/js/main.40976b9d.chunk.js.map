{"version":3,"sources":["serviceWorker.js","Repository/fragments.js","Link/index.js","Repository/RepositoryItem/index.js","Loading/index.js","Repository/RepositoryList/index.js","Repository/index.js","Error/index.js","Profile/index.js","Title/index.js","App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","REPOSITORY_FRAGMENT","gql","_templateObject","Link","_ref","children","props","Object","objectWithoutProperties","react_default","a","createElement","assign","target","rel","STAR_REPOSITORY","RepositoryItem_templateObject","UNSTAR_REPOSITORY","_templateObject2","updateAddStar","client","_ref6","id","data","addStar","starrable","repository","readFragment","concat","fragment","totalCount","stargazers","writeFragment","objectSpread","updateRemoveStar","_ref7","removeStar","RepositoryItem","name","url","owner","descriptionHTML","primaryLanguage","viewerHasStarred","watchers","viewerSubscription","forkCount","createdAt","updatedAt","languages","className","Header","as","textAlign","src_Link","href","react_apollo_esm","mutation","variables","_ref3","loading","error","Button","onClick","update","circular","size","color","_ref2","Container","Grid","columns","relaxed","Column","List","Item","value","login","edges","map","_ref4","node","_ref5","Divider","vertical","Loading","updateQuery","previousResult","fetchMoreResult","viewer","repositories","toConsumableArray","RepositoryList","fetchMore","react","Segment","Group","raised","key","Repository_RepositoryItem","src_Loading","pageInfo","hasNextPage","inverted","type","cursor","endCursor","ErrorMessage","toString","GET_REPOSITORIES_OF_USER","Profile_templateObject","Profile","username","query","notifyOnNetworkStatusChange","Error","user","Repository","Title","Subheader","App","state","onUsernameSubmit","e","_this","setState","this","Row","src_Title","Input","action","labelPosition","icon","content","actionPosition","placeholder","defaultValue","onChange","src_Profile","Component","httpLink","HttpLink","uri","headers","authorization","process","cache","InMemoryCache","errorLink","onError","graphQLErrors","networkError","link","ApolloLink","from","ApolloClient","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40976b9d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n      ),\n  );\n  \n  export function register(config) {\n    if (\n      process.env.NODE_ENV === 'production' &&\n      'serviceWorker' in navigator\n    ) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location,\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA',\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\n          'Error during service worker registration:',\n          error,\n        );\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') ===\n            -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.',\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n    fragment repository on Repository {\n        id\n        name\n        url\n        descriptionHTML\n        primaryLanguage {\n            name\n        }\n        owner {\n            login\n            url\n        }\n        stargazers(first: 5) {\n            edges{\n                node {\n                    name\n                }\n            }\n            totalCount\n          }\n        viewerHasStarred\n        watchers {\n            totalCount\n        }\n        viewerSubscription\n        forkCount\n        createdAt\n        updatedAt\n        languages(\n            first: 5\n            orderBy: { direction: DESC, field: SIZE }\n        ){\n            edges {\n                node {\n                    id\n                    name\n                    color\n                }\n            }\n        }\n    }\n`;\n\nexport default REPOSITORY_FRAGMENT;","import React from 'react';\n\nconst Link = ({ children, ...props }) => (\n  <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nexport default Link;","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport Link from '../../Link';\n\nimport { Button, Container, Divider, Header, Grid, List } from 'semantic-ui-react'\n\nimport '../style.css';\n\nconst RepositoryItem = ({\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n    forkCount,\n    createdAt,\n    updatedAt,\n    languages,\n}) => (\n    \n    <div>\n        <div className=\"RepositoryItem-title\">\n            <Header as='h2' textAlign='center'>\n                <Link href={url}>{name}</Link> \n                {!viewerHasStarred ? (\n                    <Mutation mutation={STAR_REPOSITORY} variables={{id}}>\n                        {(addStar, {data,loading,error}) => (\n                            <Button \n                                className={'RepositoryItem-button'}\n                                onClick={addStar}\n                                update={updateAddStar}\n                                circular\n                                size='mini'\n                                color='yellow'\n                            >\n                                Star\n                            </Button> \n                        )}\n                    </Mutation>\n                ) : (\n                    <Mutation mutation={UNSTAR_REPOSITORY} variables={{id}}>\n                    {(removeStar, {data,loading,error}) => (\n                        <Button\n                            className={'RepositoryItem-button'}\n                            onClick={removeStar}\n                            update={updateRemoveStar}\n                            circular\n                            size='mini'\n                            color='red'\n                        >\n                            Unstar\n                        </Button> \n                    )}\n                </Mutation>\n                )}\n            </Header>\n\n            \n            <Container className=\"RepositoryItem-information\">\n                <Grid columns={2} relaxed='very'>\n                    <Grid.Column>\n                        <h3>Details</h3> \n                        <List as='ol'>\n                            <List.Item as='li' value='-'>\n                                <h4>Owner: </h4>  <a href={owner.url}>{owner.login}</a>\n                            </List.Item>\n                            <List.Item as='li' value='-'>\n                                <h4> Date created: </h4> {createdAt}\n                            </List.Item>\n                            <List.Item as='li' value='-'>\n                                <h4> Date last update: </h4> {updatedAt}\n                            </List.Item>\n                            <List.Item as='li' value='-'>\n                                <h4> Languages: </h4>\n                                <List.Item as='ol'>\n                                    {languages.edges.map(({node}) => ( \n                                        <List.Item as='li' value='+'>\n                                            {node.name} \n                                        </List.Item>\n                                    ))}   \n                                </List.Item> \n                            </List.Item>\n                        </List>\n                        \n                    </Grid.Column>\n\n                    <Grid.Column>\n                        <h3>Stats</h3> \n                        <List as='ol'>\n                            <List.Item as='li' value='-'>\n                                <h4> Fork count: </h4> {forkCount}\n                            </List.Item>\n                            <List.Item as='li' value='-'>\n                                <h4> Stars count: </h4> {stargazers.totalCount} \n                                { (stargazers.totalCount >0) ? (\n                                        \n                                        <List.Item as='ol'>\n                                            {stargazers.edges.map(({node}) => ( \n                                                <List.Item as='li' value='+'>\n                                                    {node.name}\n                                                </List.Item>\n                                            ))}  \n                                        </List.Item>  \n                                    ) : (\n                                       <p></p>\n                                    )}\n                            </List.Item>\n                  \n                                    \n\n\n                               \n    \n                           \n                        </List>\n                    </Grid.Column>\n                </Grid>\n                <Divider vertical></Divider>\n            </Container>\n       \n           \n        </div>\n\n    </div>\n);\n\nconst STAR_REPOSITORY = gql`\n    mutation($id: ID!) {\n        addStar(input: {starrableId: $id}) {\n            starrable {\n                id\n                viewerHasStarred\n            }\n        }\n    }\n`;\n\nconst UNSTAR_REPOSITORY = gql`\n    mutation($id: ID!) {\n        removeStar(input: {starrableId: $id}) {\n            starrable {\n                id\n                viewerHasStarred\n            }\n        }\n    }\n`;\n\nconst updateAddStar = (client, {data: {addStar: {starrable: {id}}}}) => {\n    const repository = client.readFragment({\n        id: `Repository:${id}`,\n        fragment: REPOSITORY_FRAGMENT,\n    });\n\n    const totalCount = repository.stargazers.totalCount + 1;\n    \n    client.writeFragment({\n        id: `Repository: ${id}`,\n        fragment: REPOSITORY_FRAGMENT,\n        data: {\n            ...repository,\n            stargazers: {\n                ...repository.stargazers,\n                totalCount,\n            }\n        }\n    })\n}\n\nconst updateRemoveStar = (client, {data: {removeStar: {starrable: {id}}}}) => {\n    const repository = client.readFragment({\n        id: `Repository:${id}`,\n        fragment: REPOSITORY_FRAGMENT,\n    });\n\n    const totalCount = repository.stargazers.totalCount - 1;\n    \n    client.writeFragment({\n        id: `Repository: ${id}`,\n        fragment: REPOSITORY_FRAGMENT,\n        data: {\n            ...repository,\n            stargazers: {\n                ...repository.stargazers,\n                totalCount,\n            }\n        }\n    })\n}\n\nexport default RepositoryItem;","import React from 'react';\nconst Loading = () =>\n<div>Loading ...</div>\nexport default Loading;","import React, { Fragment } from 'react';\n\nimport RepositoryItem from '../RepositoryItem';\nimport Loading from '../../Loading';\n\nimport { Container, Segment, Button } from 'semantic-ui-react'\n\nimport '../style.css';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n    if (!fetchMoreResult){\n        return previousResult;\n    }\n\n    return {\n        ...previousResult,\n        viewer: {\n            ...previousResult.viewer,\n            repositories: {\n                ...previousResult.viewer.repositories,\n                ...fetchMoreResult.viewer.repositories,\n                edges: [\n                    ...previousResult.viewer.repositories.edges,\n                    ...fetchMoreResult.viewer.repositories.edges,\n                ]\n            }\n        }\n    }\n}\n\nconst RepositoryList = ({ repositories, loading, fetchMore }) =>\n\n    <Fragment>\n        <Container>\n            <Segment.Group raised>     \n                {repositories.edges.map(({ node}) => ( \n                    <Segment color='olive'>\n                        <div key={node.id} className=\"RepositoryItem\">\n                            <RepositoryItem {...node} />\n                        </div>\n                    </Segment>\n                ))}      \n            </Segment.Group>\n\n\n            {loading ? (\n                <Loading />\n            ): (\n                repositories.pageInfo.hasNextPage && (\n                    <Button\n                        inverted color='olive'\n                        type=\"button\"\n                        onClick={ () => \n                            fetchMore({ \n                                variables: { \n                                    cursor: repositories.pageInfo.endCursor,\n                                },\n                                updateQuery,\n                            })\n                        }\n                    >\n                        More Repositories\n                    </Button>\n                )\n            )}\n        </Container>\n\n\n        \n    </Fragment>\n\n    \n\nexport default RepositoryList;","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\nexport default RepositoryList;","import React from 'react';\nimport './style.css';\n\nconst ErrorMessage = ({error}) => (\n    <div className=\"ErrorMessage\">\n        <small>{error.toString()}</small>\n    </div>\n)\n\nexport default ErrorMessage;","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\n\nconst GET_REPOSITORIES_OF_USER = gql`\n    query($username: String!, $cursor: String){\n        user(login: $username) {\n            repositories(\n                first: 5\n                orderBy: { direction: DESC, field: STARGAZERS }\n                after: $cursor\n            ) {\n                edges {\n                    node {\n                        ...repository\n                    }\n                }\n                pageInfo {\n                    endCursor\n                    hasNextPage\n                }\n            }\n        }\n    }\n  ${REPOSITORY_FRAGMENT}\n`;\n\n\n\nconst Profile = ({ username }) => (\n   \n    <Query \n        query={GET_REPOSITORIES_OF_USER}\n        variables={{\n            username,\n          }}\n        notifyOnNetworkStatusChange={true}\n    > \n\n        {({ data, loading, error, fetchMore }) => {\n            if (error) {\n                return <ErrorMessage error={error} />;\n            }\n\n            const { user } = data;\n\n            if (loading && !user) {\n                return <Loading />;\n            }\n\n            return (\n                <RepositoryList repositories={user.repositories} fetchMore={fetchMore} />\n            )\n        }}\n    </Query>\n);\n\nexport default Profile;","import React from 'react'\nimport { Container, Header, Input, Button } from 'semantic-ui-react'\nimport './style.css'\n\nconst Title = () => (\n    <div>\n        <Container>\n            <Header as='h1' color='olive'> \n                Gitmpse \n                <Header.Subheader> A GitHub repositories glimpse</Header.Subheader>\n            </Header>\n           \n        </Container>\n        \n    </div>\n)\n\nexport default Title;","import React, { Component } from 'react';\n\nimport Profile from '../Profile';\nimport Title from '../Title';\n\nimport { Grid, Container, Input } from 'semantic-ui-react'\n\nclass App extends Component {\n    state = {\n        username: 'EmiliaPaz',\n    };\n\n    onUsernameSubmit = (e, data) => {\n        this.setState({ username: data.value });\n      };\n\n    render() {\n        const { username } = this.state;\n\n        return (\n            <div>\n                <Grid columns={1}>\n                    <Grid.Row>\n                        <Container textAlign='center' > \n                            <Title/>\n                        </Container>\n                    </Grid.Row>\n                    <Grid.Row >\n                        <Container textAlign='center' > \n                            <Input\n                                action={{ color: 'olive', labelPosition: 'left', icon: 'user', content: 'Username' }}\n                                actionPosition='left'\n                                placeholder='...'\n                                defaultValue='EmiliaPaz'\n                                size='small'\n                                onChange= {this.onUsernameSubmit}\n                            />\n                        </Container>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Profile username={username}/>\n                    </Grid.Row>\n                </Grid>\n\n                {/* <Title/>\n                <Container textAlign='center' > \n                    <Input\n                        action={{ color: 'olive', labelPosition: 'left', icon: 'user', content: 'Username' }}\n                        actionPosition='left'\n                        placeholder='...'\n                        defaultValue='EmiliaPaz'\n                        onChange= {this.onUsernameSubmit}\n                    />\n                </Container>\n                \n                <Profile username={username}/> */}\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error'; \nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\nimport './style.css';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n});\n\nconst cache = new InMemoryCache();\n\nconst errorLink = onError (({ graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n\n    }\n    if (networkError) {\n\n    }\n})\n\nconst link = ApolloLink.from([errorLink,httpLink]);\n\nconst client = new ApolloClient({\n    link,\n    cache,\n  });\n  \n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}